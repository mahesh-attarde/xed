#BEGIN_LEGAL
#
#Copyright (c) 2025 Intel Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#END_LEGAL

# Temporary file for a partial initialization and binding
# TBD - should be autogenerated on build time

cdef_string = '''
void xed_tables_init_py(void);
void xed_state_init2_py(xed_state_t* p,
                                      xed_machine_mode_enum_t arg_mmode,
                                      xed_address_width_enum_t arg_stack_addr_width);

void xed_operand_values_set_mode_py(xed_operand_values_t* p,
                            const xed_state_t* dstate);

xed_error_enum_t xed_decode_py(xed_decoded_inst_t* xedd, 
           const xed_uint8_t* itext, 
           const unsigned int bytes);

xed_category_enum_t xed_decoded_inst_get_category_py(const xed_decoded_inst_t* p);
xed_extension_enum_t xed_decoded_inst_get_extension_py(const xed_decoded_inst_t* p);
xed_isa_set_enum_t xed_decoded_inst_get_isa_set_py(xed_decoded_inst_t const* const p);
xed_iclass_enum_t xed_decoded_inst_get_iclass_py(const xed_decoded_inst_t* p);

const char* xed_extension_enum_t2str_py(const xed_extension_enum_t p);
const char* xed_iclass_enum_t2str_py(const xed_iclass_enum_t p);
xed_iform_enum_t xed_decoded_inst_get_iform_enum_py(const xed_decoded_inst_t* p);
const char* xed_iform_enum_t2str_py(const xed_iform_enum_t p);
const char* xed_isa_set_enum_t2str_py(const xed_isa_set_enum_t p);
const char* xed_category_enum_t2str_py(const xed_category_enum_t p);

xed_bool_t xed_classify_apx_py(const xed_decoded_inst_t* d);

xed_bool_t xed_decoded_inst_dump_xed_format_py(const xed_decoded_inst_t* p,
                                 char* buf, 
                                 int buflen, 
                                 xed_uint64_t runtime_address);
void xed_init_print_info_py(xed_print_info_t* pi);
xed_bool_t xed_format_generic_py(xed_print_info_t* pi);

const char* xed_error_enum_t2str_py(const xed_error_enum_t p);
xed_chip_enum_t str2xed_chip_enum_t_py(const char* s);
const char* xed_chip_enum_t2str_py(const xed_chip_enum_t p);

void xed_decoded_inst_zero_py(xed_decoded_inst_t* p);
void xed_decoded_inst_zero_set_mode_py(xed_decoded_inst_t* p, const xed_state_t* dstate);
void xed_decoded_inst_set_input_chip_py(xed_decoded_inst_t* p, xed_chip_enum_t chip);
xed_uint_t xed_decoded_inst_get_length_py(const xed_decoded_inst_t* p);
const xed_inst_t* xed_decoded_inst_inst_py(const xed_decoded_inst_t* p);
unsigned int xed_inst_noperands_py(const xed_inst_t* p);
const xed_operand_t* xed_inst_operand_py(const xed_inst_t* p, unsigned int i);
xed_operand_enum_t xed_operand_name_py(const xed_operand_t* p);
const char* xed_operand_enum_t2str_py(const xed_operand_enum_t p);
xed_reg_enum_t xed_decoded_inst_get_reg_py(const xed_decoded_inst_t* p, xed_operand_enum_t reg_operand);
const char* xed_reg_enum_t2str_py(const xed_reg_enum_t p);
xed_operand_visibility_enum_t xed_operand_operand_visibility_py( const xed_operand_t* p);
const char* xed_operand_visibility_enum_t2str_py(const xed_operand_visibility_enum_t p);
xed_operand_action_enum_t xed_decoded_inst_operand_action_py(const xed_decoded_inst_t* p, unsigned int operand_index);
const char* xed_operand_action_enum_t2str_py(const xed_operand_action_enum_t p);
xed_uint_t xed_decoded_inst_number_of_memory_operands_py(const xed_decoded_inst_t* p);
xed_reg_enum_t xed_decoded_inst_get_base_reg_py(const xed_decoded_inst_t* p, unsigned int mem_idx);
xed_reg_enum_t xed_decoded_inst_get_index_reg_py(const xed_decoded_inst_t* p, unsigned int mem_idx);
xed_bool_t xed_operand_values_has_memory_displacement_py(const xed_operand_values_t* p);
xed_int64_t xed_decoded_inst_get_memory_displacement_py(const xed_decoded_inst_t* p, unsigned int mem_idx);
xed_int64_t xed_decoded_inst_get_scale_py(const xed_decoded_inst_t* p, unsigned int mem_idx);
xed_uint_t xed_decoded_inst_get_memory_displacement_width_py(const xed_decoded_inst_t* p, unsigned int mem_idx);
unsigned int xed_decoded_inst_operand_length_bits_py(const xed_decoded_inst_t* p, unsigned int operand_index);
xed_uint_t xed_decoded_inst_get_immediate_is_signed_py(const xed_decoded_inst_t* p);
xed_int32_t xed_decoded_inst_get_signed_immediate_py(const xed_decoded_inst_t* p);
xed_uint64_t xed_decoded_inst_get_unsigned_immediate_py(const xed_decoded_inst_t* p);
xed_uint8_t xed_decoded_inst_get_second_immediate_py(const xed_decoded_inst_t* p);
'''
